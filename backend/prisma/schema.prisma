generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  provider  String   @default("google")
  providerId String
  plan      Plan     @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  folders  Folder[]
  apiKeys  ApiKey[]
  payments Payment[]

  @@map("users")
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  color     FolderColor @default(BLUE)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  links Link[]

  @@map("folders")
}
model Link {
  id          String   @id @default(cuid())
  originalUrl String
  shortCode   String   @unique
  title       String?
  description String?
  favicon     String?
  clicks      Int      @default(0)
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  password    String?
  folderId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  folder    Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  analytics ClickAnalytic[]
  qrCode    QrCode?

  @@map("links")
}

model ClickAnalytic {
  id        String   @id @default(cuid())
  linkId    String
  userAgent String?
  referer   String?
  ip        String?
  country   String?
  city      String?
  device    String?
  browser   String?
  os        String?
  clickedAt DateTime @default(now())

  link Link @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@map("click_analytics")
}

model QrCode {
  id     String @id @default(cuid())
  linkId String @unique
  data   String
  format String @default("png")

  link Link @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@map("qr_codes")
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  userId    String
  isActive  Boolean  @default(true)
  lastUsed  DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  stripeId      String   @unique
  amount        Int
  currency      String   @default("usd")
  status        PaymentStatus
  plan          Plan
  billingPeriod BillingPeriod
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum Plan {
  FREE
  PRO
  BUSINESS
}

enum FolderColor {
  BLUE
  GREEN
  ORANGE
  PURPLE
  RED
  YELLOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BillingPeriod {
  MONTHLY
  YEARLY
}